r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
g <-  ggplot(distances, aes(xaxis,distances)) +
geom_col(colour="blue") +
labs(x = "Data Point Order", y ="Distance between data points") +
xlim(c(0,max(xaxis)+1)) +
ylim(c(0,max(distances)+1))
h <-  ggplot(distances_accum, aes(xaxis, distances_accum)) +
geom_line(colour="blue", size=1) +
geom_point(color="blue", size=4) +
xlim(c(0,max(xaxis)+1)) +
ylim(c(0,max(distances_accum)+1)) +
labs(x = "Data Point Order", y ="Accumulated distance between data points") +
geom_vline(xintercept=cluster_intercepts)
# Put plots in window
grid.arrange(f, g, h, nrow=1, ncol=3, top="Exploratory Data Analysis")
f
g
h
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, colour="red", size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
ordered_frame
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, colour=aes(factor(labels)), size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, fill=aes(factor(labels)), size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, aes(fill=factor(labels)), size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, fill=factor(labels), size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, aes(fill=factor(labels)), size=4, pch=21) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, aes(fill=factor(labels)), size=4, pch=21) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, aes(fill=factor(labels)), size=4, pch=21)
f <-  ggplot(data = ordered_frame, aes(x, y))
f
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21)
f
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1)
f
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="black", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
f <-  ggplot() +
geom_point(aes(x, y), data = ordered_frame, colour=aes(labels), size=4) +
geom_point(aes(x[1],y[1]), data = ordered_frame, colour="green", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), colour="black", size=6, pch=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), colour="black", size=6, shape=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
f <-  ggplot(data = ordered_frame, aes(x, y)) +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), colour="black", size=6, shape=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f
f <-  ggplot(data = ordered_frame, aes(x, y))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="red", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="red", size=1)
}
}
f <- f +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), colour="black", size=6, shape=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
f <-  ggplot(data = ordered_frame, aes(x, y))
for (i in 1:(length(cluster_intercepts)+1)) {
if (i==1) {
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[1:r2,], colour="black", size=1)
} else if (i==length(cluster_intercepts)+1) {
r1 <- r2 + 1
r2 <- dim(points_order)[1]
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="black", size=1)
} else {
r1 <- r2 + 1
r2 <- ceiling(cluster_intercepts[i])
f <- f + geom_path(aes(x, y), data = ordered_frame[r1:r2,], colour="black", size=1)
}
}
f <- f +
geom_point(colour="white", aes(fill=factor(labels)), size=4, shape=21) +
geom_point(aes(x[1],y[1]), colour="black", size=6, shape=1) +
labs(title = "Data Points") +
labs(x = "X", y ="Y") +
ylim(c(0,max(y)+1)) + xlim(c(0,max(x)+1))
f
source('~/Documents/Github Repos/Main/fplotdataclusters.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/fclustering.R')
source('~/Documents/Github Repos/Main/Clustering by staircase.R')
# Loading and preprocessing the data
fdata_orig <- read.csv("activity.csv")
d1 <- sprintf("%04d", as.numeric(fdata_orig$interval))
d2 <- format(strptime(d1, format="%H%M"), format = "%H:%M")
d3 <- as.POSIXct(d2, format="%H:%M")
fdata_orig$interval <- d3
fdata <- fdata_orig
# What is mean total number of steps taken per day?
tot_steps_pd_orig <- aggregate(steps ~ date, fdata_orig, sum, na.rm=TRUE)
hist(tot_steps_pd_orig$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (16 out of 53).",
breaks=10, labels=TRUE)
mean_tot_steps_pd_orig <- mean(tot_steps_pd_orig$steps)
median_tot_steps_pd_orig <- median(tot_steps_pd_orig$steps)
# What is the average daily activity pattern?
avg_steps_per_interv_orig <- aggregate(steps ~ interval, fdata_orig, mean, na.rm=TRUE)
find_max_orig <- which.max(avg_steps_per_interv_orig$steps)
plot(avg_steps_per_interv_orig,type="l")
points(avg_steps_per_interv_orig[find_max_orig,],col="red", pch=19)
text(avg_steps_per_interv_orig$interval[find_max_orig]+50,avg_steps_per_interv_orig$steps[find_max_orig],
"The most active 5-min interval is the 104th interval, which is around 8:35AM.", adj=0)
# Imputting missing values.
# Total number of missing values in the dataset, i.e. the total number of rows with NA.
no_of_rows_w_NA <- sum(!complete.cases(fdata_orig))
# Replace all missing values in the steps column with the mean for that 5-minute interval.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
fdata$steps <- ifelse(is.na(fdata$steps),
avg_steps_per_interv_orig$steps[match(fdata$interv, avg_steps_per_interv_orig$interv)],
fdata$steps)
# Make a histogram of the tot number of steps taken each day.
tot_steps_pd <- aggregate(steps ~ date, fdata, sum, na.rm=TRUE)
hist(tot_steps_pd$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (24 out of 61).",
breaks=10, labels=TRUE)
# Calculate number of NA's per day - how are NA's distributed across days.
no_NA_pd <- lapply(split(fdata_orig,fdata_orig$date),
function (fdata_orig) {sum(is.na(fdata_orig$steps))})
table(as.numeric(no_NA_pd))
# Calculate and report the mean and median tot no of steps taken per day.
mean_tot_steps_pd <- mean(tot_steps_pd$steps)
median_tot_steps_pd <- median(tot_steps_pd$steps)
# Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Are there differences in activity patterns between weekdays and weekends?
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
avg_steps_per_interv_weekday <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekday",],
FUN=mean)
avg_steps_per_interv_weekend <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekend",],
FUN=mean)
avg_steps_per_interv_Saturday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Saturday",],
FUN=mean)
avg_steps_per_interv_Sunday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Sunday",],
FUN=mean)
par(mfrow=c(2,1), oma=c(5,5,5,1), mar=c(0,0,0,0))
plot(avg_steps_per_interv_weekday, xaxt="n", ylim=c(0,250), type="l", lwd=3)
abline(v=avg_steps_per_interv_weekday$interval[c(98,112)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekday$interval[1], 150, "(A)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekday Average"), lty=1, lwd=2.5, col="black")
# Most activity takes place between 8:05-9:15 hour (grey dotted lines).
plot(avg_steps_per_interv_weekend, ylim=c(0,250), type="l", lwd=3)
lines(avg_steps_per_interv_Saturday, col="red", lwd=2)
lines(avg_steps_per_interv_Sunday, col="blue", lwd=2)
abline(v=avg_steps_per_interv_weekend$interval[c(100,116)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekend$interval[1], 150, "(B)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekend Average", "Saturday", "Sunday"), lty=c(1, 1, 1), lwd=c(2.5, 2.5, 2.5), col=c("black", "red", "blue"))
# Peak is less pronounced, and occurs later 8:15-9:35 hour (grey dotted lines).
mtext("More activity during weekdays than in weekends, and more early activity on Saturday than on Sunday.", outer=TRUE, line = 1)
mtext("Average number of steps per 5 min time interval", side=2, line=3, outer=TRUE, srt=90)
mtext("Time Interval (0:00 - 23:55 hours)", side=1, line=3, outer=TRUE)
setwd('~/Documents/Github Repos/DataScienceSpecialisation/5. Reproducible Research/week 2'); dir()
# Loading and preprocessing the data
fdata_orig <- read.csv("activity.csv")
d1 <- sprintf("%04d", as.numeric(fdata_orig$interval))
d2 <- format(strptime(d1, format="%H%M"), format = "%H:%M")
d3 <- as.POSIXct(d2, format="%H:%M")
fdata_orig$interval <- d3
fdata <- fdata_orig
# What is mean total number of steps taken per day?
tot_steps_pd_orig <- aggregate(steps ~ date, fdata_orig, sum, na.rm=TRUE)
hist(tot_steps_pd_orig$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (16 out of 53).",
breaks=10, labels=TRUE)
mean_tot_steps_pd_orig <- mean(tot_steps_pd_orig$steps)
median_tot_steps_pd_orig <- median(tot_steps_pd_orig$steps)
# What is the average daily activity pattern?
avg_steps_per_interv_orig <- aggregate(steps ~ interval, fdata_orig, mean, na.rm=TRUE)
find_max_orig <- which.max(avg_steps_per_interv_orig$steps)
plot(avg_steps_per_interv_orig,type="l")
points(avg_steps_per_interv_orig[find_max_orig,],col="red", pch=19)
text(avg_steps_per_interv_orig$interval[find_max_orig]+50,avg_steps_per_interv_orig$steps[find_max_orig],
"The most active 5-min interval is the 104th interval, which is around 8:35AM.", adj=0)
# Imputting missing values.
# Total number of missing values in the dataset, i.e. the total number of rows with NA.
no_of_rows_w_NA <- sum(!complete.cases(fdata_orig))
# Replace all missing values in the steps column with the mean for that 5-minute interval.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
fdata$steps <- ifelse(is.na(fdata$steps),
avg_steps_per_interv_orig$steps[match(fdata$interv, avg_steps_per_interv_orig$interv)],
fdata$steps)
# Make a histogram of the tot number of steps taken each day.
tot_steps_pd <- aggregate(steps ~ date, fdata, sum, na.rm=TRUE)
hist(tot_steps_pd$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (24 out of 61).",
breaks=10, labels=TRUE)
# Calculate number of NA's per day - how are NA's distributed across days.
no_NA_pd <- lapply(split(fdata_orig,fdata_orig$date),
function (fdata_orig) {sum(is.na(fdata_orig$steps))})
table(as.numeric(no_NA_pd))
# Calculate and report the mean and median tot no of steps taken per day.
mean_tot_steps_pd <- mean(tot_steps_pd$steps)
median_tot_steps_pd <- median(tot_steps_pd$steps)
# Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Are there differences in activity patterns between weekdays and weekends?
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
avg_steps_per_interv_weekday <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekday",],
FUN=mean)
avg_steps_per_interv_weekend <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekend",],
FUN=mean)
avg_steps_per_interv_Saturday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Saturday",],
FUN=mean)
avg_steps_per_interv_Sunday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Sunday",],
FUN=mean)
par(mfrow=c(2,1), oma=c(5,5,5,1), mar=c(0,0,0,0))
plot(avg_steps_per_interv_weekday, xaxt="n", ylim=c(0,250), type="l", lwd=3)
abline(v=avg_steps_per_interv_weekday$interval[c(98,112)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekday$interval[1], 150, "(A)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekday Average"), lty=1, lwd=2.5, col="black")
# Most activity takes place between 8:05-9:15 hour (grey dotted lines).
plot(avg_steps_per_interv_weekend, ylim=c(0,250), type="l", lwd=3)
lines(avg_steps_per_interv_Saturday, col="red", lwd=2)
lines(avg_steps_per_interv_Sunday, col="blue", lwd=2)
abline(v=avg_steps_per_interv_weekend$interval[c(100,116)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekend$interval[1], 150, "(B)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekend Average", "Saturday", "Sunday"), lty=c(1, 1, 1), lwd=c(2.5, 2.5, 2.5), col=c("black", "red", "blue"))
# Peak is less pronounced, and occurs later 8:15-9:35 hour (grey dotted lines).
mtext("More activity during weekdays than in weekends, and more early activity on Saturday than on Sunday.", outer=TRUE, line = 1)
mtext("Average number of steps per 5 min time interval", side=2, line=3, outer=TRUE, srt=90)
mtext("Time Interval (0:00 - 23:55 hours)", side=1, line=3, outer=TRUE)
source('~/Documents/Github Repos/DataScienceSpecialisation/5. Reproducible Research/Week 2/ExploratoryAnalysis - v1.R')
fdata_orig <- read.csv("activity.csv")
class(fdata_orig$interval)
d1 <- sprintf("%04d", as.numeric(fdata_orig$interval))
d2 <- format(strptime(d1, format="%H%M"), format = "%H:%M")
d3 <- as.POSIXct(d2, format="%H:%M")
fdata_orig$interval <- d3
fdata <- fdata_orig
class(d3)
head(dr)
head(d3)
# Set working directory
setwd('~/Documents/Github Repos/DataScienceSpecialisation/5. Reproducible Research/week 2'); dir()
# Clear memory
rm(list=ls())
# Loading and preprocessing the data
fdata_orig <- read.csv("activity.csv")
d1 <- sprintf("%04d", as.numeric(fdata_orig$interval))
d2 <- format(strptime(d1, format="%H%M"), format = "%H:%M")
d3 <- as.POSIXct(d2, format="%H:%M")
fdata_orig$interval <- d3
fdata <- fdata_orig
# What is mean total number of steps taken per day?
tot_steps_pd_orig <- aggregate(steps ~ date, fdata_orig, sum, na.rm=TRUE)
par(oma=c(3,3,3,1))
hist(tot_steps_pd_orig$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (16 out of 53).",
breaks=10, labels=TRUE)
mean_tot_steps_pd_orig <- mean(tot_steps_pd_orig$steps)
median_tot_steps_pd_orig <- median(tot_steps_pd_orig$steps)
# What is the average daily activity pattern?
avg_steps_per_interv_orig <- aggregate(steps ~ interval, fdata_orig, mean, na.rm=TRUE)
find_max_orig <- which.max(avg_steps_per_interv_orig$steps)
plot(avg_steps_per_interv_orig,type="l")
points(avg_steps_per_interv_orig[find_max_orig,],col="red", pch=19)
text(avg_steps_per_interv_orig$interval[find_max_orig]+50,avg_steps_per_interv_orig$steps[find_max_orig],
"The most active 5-min interval is the 104th interval, which is around 8:35AM.", adj=0)
# Imputting missing values.
# Total number of missing values in the dataset, i.e. the total number of rows with NA.
no_of_rows_w_NA <- sum(!complete.cases(fdata_orig))
# Replace all missing values in the steps column with the mean for that 5-minute interval.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
fdata$steps <- ifelse(is.na(fdata$steps),
avg_steps_per_interv_orig$steps[match(fdata$interv, avg_steps_per_interv_orig$interv)],
fdata$steps)
# Make a histogram of the tot number of steps taken each day.
tot_steps_pd <- aggregate(steps ~ date, fdata, sum, na.rm=TRUE)
hist(tot_steps_pd$steps, col="red", xlab="Total steps per day (-)",
ylab="Frequency", main="Histogram - Days with 10,000 to 12,000 steps occur most often (24 out of 61).",
breaks=10, labels=TRUE)
# Calculate number of NA's per day - how are NA's distributed across days.
no_NA_pd <- lapply(split(fdata_orig,fdata_orig$date),
function (fdata_orig) {sum(is.na(fdata_orig$steps))})
table(as.numeric(no_NA_pd))
# Calculate and report the mean and median tot no of steps taken per day.
mean_tot_steps_pd <- mean(tot_steps_pd$steps)
median_tot_steps_pd <- median(tot_steps_pd$steps)
# Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Are there differences in activity patterns between weekdays and weekends?
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
avg_steps_per_interv_weekday <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekday",],
FUN=mean)
avg_steps_per_interv_weekend <- aggregate(steps ~ interval,
fdata[fdata$daytype=="Weekend",],
FUN=mean)
avg_steps_per_interv_Saturday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Saturday",],
FUN=mean)
avg_steps_per_interv_Sunday <- aggregate(steps ~ interval,
fdata[fdata$weekday=="Sunday",],
FUN=mean)
par(mfrow=c(2,1), oma=c(5,5,5,1), mar=c(0,0,0,0))
plot(avg_steps_per_interv_weekday, xaxt="n", ylim=c(0,250), type="l", lwd=3)
abline(v=avg_steps_per_interv_weekday$interval[c(98,112)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekday$interval[1], 150, "(A)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekday Average"), lty=1, lwd=2.5, col="black")
# Most activity takes place between 8:05-9:15 hour (grey dotted lines).
plot(avg_steps_per_interv_weekend, ylim=c(0,250), type="l", lwd=3)
lines(avg_steps_per_interv_Saturday, col="red", lwd=2)
lines(avg_steps_per_interv_Sunday, col="blue", lwd=2)
abline(v=avg_steps_per_interv_weekend$interval[c(100,116)],lty=3,lwd=3,col="grey40")
text(avg_steps_per_interv_weekend$interval[1], 150, "(B)", adj=0)
legend(avg_steps_per_interv_weekend$interval[260], 200, c("Weekend Average", "Saturday", "Sunday"), lty=c(1, 1, 1), lwd=c(2.5, 2.5, 2.5), col=c("black", "red", "blue"))
# Peak is less pronounced, and occurs later 8:15-9:35 hour (grey dotted lines).
mtext("More activity during weekdays than in weekends, and more early activity on Saturday than on Sunday.", outer=TRUE, line = 1)
mtext("Average number of steps per 5 min time interval", side=2, line=3, outer=TRUE, srt=90)
mtext("Time Interval (0:00 - 23:55 hours)", side=1, line=3, outer=TRUE)
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
fdata$weekday <- with(fdata, weekdays(as.Date(fdata$date, format="%Y-%m-%d")))
fdata$daytype <- with(fdata, ifelse(fdata$weekday %in% c("Saturday","Sunday"),
"Weekend",
"Weekday"))
